name: Tests
on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

jobs:
  pytest-and-notebooks:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.9", "3.8", "3.7"]

    # This allows a subsequently queued workflow run to interrupt previous runs
    concurrency:
      group: "${{ github.workflow }} - ${{ matrix.os }} @ ${{ github.ref }}"
      cancel-in-progress: true

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: "**/pyproject.toml"

      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install ".[tests]"

      - name: Run and write pytest
        shell: bash
        run: |
          set -o pipefail
          pytest --cov=textdescriptives --cov-report term-missing | tee pytest-coverage.txt

      - name: Install dependencies for notebooks
        shell: bash
        run: |
          pip install ".[tutorials]"

      - name: Convert and run notebooks
        shell: bash
        run: |
          jupyter nbconvert --to python ./docs/tutorials/*.ipynb
          for f in docs/tutorials/*.py; do python "$f"; done

      # if it is run on ubuntu-latest, python 3.9, then create the badge
      - name: Pytest coverage comment
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.python-version == '3.9' }}
        id: coverage-comment
        uses: MishaKav/pytest-coverage-comment@v1.1.41
        with:
          pytest-coverage-path: ./pytest-coverage.txt

      - name: Check the output coverage
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.python-version == '3.9' }}
        shell: bash
        run: |
          echo "Coverage Report - ${{ steps.coverage-comment.outputs.coverage }}"
          echo "Coverage Color - ${{ steps.coverage-comment.outputs.color }}"

      # and if it is a push to main then create the badge
      - name: Create the Badge
        if: ${{ github.event_name == 'push' && matrix.os == 'ubuntu-latest' && matrix.python-version == '3.9' }}
        uses: schneegans/dynamic-badges-action@v1.6.0
        with:
          auth: ${{ secrets.PYTEST_COVERAGE }}
          gistID: 24ee79064ca9d49616cbc410da65cee2
          filename: badge-textdescriptives-pytest-coverage.json
          label: Coverage
          message: ${{ steps.coverage-comment.outputs.coverage }}
          color: ${{ steps.coverage-comment.outputs.color }}
          namedLogo: python

  release:
    runs-on: ubuntu-latest
    concurrency: release

    if: ${{ github.ref == 'refs/heads/main' }}
    steps:
      # Checkout action is required for token to persist
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Python Semantic Release
        uses: relekang/python-semantic-release@v7.32.0
        with:
          github_token: ${{ secrets.RELEASE }}
          # Remember to copy the [semantic_release] section from setup.cfg
          # as well
          # To enable pypi,
          # 1) Set upload_to_pypi to true in setup.cfg and
          # 2) Set the pypi_token in the repo
          # 3) Uncomment the two lines below
          repository_username: __token__
          repository_password: ${{ secrets.PYPI_TOKEN }}
