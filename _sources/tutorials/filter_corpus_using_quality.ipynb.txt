{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Filtering corpora using Quality\n",
    "\n",
    "<a target=\"_blank\" href=\"https://colab.research.google.com/github/HLasse/TextDescriptives/blob/main/docs/tutorials/filter_corpus_using_quality.ipynb\">\n",
    "  <img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/>\n",
    "</a>\n",
    "\n",
    "In many cases if you want to analyse tweets, train a model on text scraped from the web or similar, it is important to filter out low-quality texts.\n",
    "\n",
    "TextDescriptives implements a series of heuristic filters for removing low-quality text. This tutorial will take you through how to use these to filter\n",
    "your text corpora."
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setup\n",
    "\n",
    "For this we will use datasets available on [Huggingface Datasets](https://huggingface.co/datasets). Thus we will need the `datasets` package. Which you can install by running\n",
    "\n",
    "```python\n",
    "!pip install datasets\n",
    "```\n",
    "\n",
    "Or by installing textdescriptives with the `[tutorials]` option as below"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "try:\n",
    "    import textdescriptives as td\n",
    "except:\n",
    "    !pip install \"textdescriptives[tutorials]\"\n",
    "    import textdescriptives as td"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Filtering Web content\n"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "### The Data\n",
    "For our first example we will filter web content. For this we will use the [mC4 dataset](https://huggingface.co/datasets/mc4). It would take ages to download the whole data so instead we will stream down 1000 samples from the dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from datasets import load_dataset\n",
    "\n",
    "# stream in the dataset\n",
    "dataset = load_dataset(\"mc4\", \"en\", streaming=True, split=\"train\")\n",
    "\n",
    "# download the first 1 000\n",
    "dataset = dataset.take(1000)\n",
    "\n",
    "# extract the text\n",
    "texts = [sample[\"text\"] for sample in dataset]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Posts 4,362\tMore Info\n",
      "Okay so to those of you that were very helpful this is not to you but for those of you that laugh when I ask about ohms or powering LSi15's this is to you. If you know a book, website, or someone to talk to to get more info that I seek so I know what some of you are talking about please share it with me. I ask questions to gain more info on audio thats all. Not to get laughed\n"
     ]
    }
   ],
   "source": [
    "# let us look at the first part (400 characters) of the first text\n",
    "print(texts[0][:400])"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Filtering\n",
    "\n",
    "To filter texts using `textdescriptives` we need to first set up the pipeline:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import spacy\n",
    "\n",
    "# create the spacy nlp pipeline\n",
    "nlp = spacy.blank(\"en\")\n",
    "# add a component for sentence segmentation\n",
    "nlp.add_pipe(\"sentencizer\")\n",
    "# add a component for quality filtering\n",
    "quality_pipe = nlp.add_pipe(\"textdescriptives/quality\")\n",
    "\n",
    "# apply the pipeline to the texts\n",
    "docs = nlp.pipe(texts)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You will note here that docs is a generator. This can be quite useful (especially when streaming texts in one at a time), but for this example we can simply convert it to a list:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "docs is type <class 'generator'>\n",
      "docs is type <class 'list'>\n"
     ]
    }
   ],
   "source": [
    "print(f\"docs is type {type(docs)}\")\n",
    "docs = list(docs)\n",
    "print(f\"docs is type {type(docs)}\")"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now it is easy to examine the documents using the `doc._.quality` or `doc._.passed_quality_check` extensions:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Posts 4,362\tMore Info\n",
      "Okay so to those of you that were very helpful this is not to you but for those of you that laugh when I ask about ohms or powering LSi15's this is to you. If you know a book, website, or someone to talk to to get more info that I seek so I know what some of you are talking about please share it with me. I ask questions to gain more info on audio thats all. Not to get laughed at when asking it.\n"
     ]
    }
   ],
   "source": [
    "# examine the first document\n",
    "doc = docs[0]\n",
    "print(doc[:100])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "doc._.passed_quality_check"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It seems like this document did no pass the quality check. Let us examine why that is:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "QualityOutput(\n",
       "\tpassed=False, \n",
       "\tn_stop_words=ThresholdsOutput(value=435.0, passed=True, threshold=(2.0, None)), \n",
       "\talpha_ratio=ThresholdsOutput(value=0.79, passed=True, threshold=(0.7, None)), \n",
       "\tmean_word_length=ThresholdsOutput(value=3.52, passed=True, threshold=(3.0, 10.0)), \n",
       "\tdoc_length=ThresholdsOutput(value=894.0, passed=True, threshold=(10.0, 100000.0)), \n",
       "\tsymbol_to_word_ratio={'#': ThresholdsOutput(value=0.0, passed=True, threshold=(None, 0.1))}, \n",
       "\tproportion_ellipsis=ThresholdsOutput(value=0.0, passed=True, threshold=(None, 0.3)), \n",
       "\tproportion_bullet_points=ThresholdsOutput(value=0.0, passed=True, threshold=(None, 0.8)), \n",
       "\tcontains={'lorem ipsum': ThresholdsOutput(value=0.0, passed=True, threshold=False)}, \n",
       "\tduplicate_line_chr_fraction=ThresholdsOutput(value=0.0, passed=True, threshold=(None, 0.2)), \n",
       "\tduplicate_paragraph_chr_fraction=ThresholdsOutput(value=0.0, passed=True, threshold=(None, 0.2)), \n",
       "\tduplicate_ngram_chr_fraction={'5': ThresholdsOutput(value=0.42, passed=False, threshold=(None, 0.15)), '6': ThresholdsOutput(value=0.42, passed=False, threshold=(None, 0.14)), '7': ThresholdsOutput(value=0.38, passed=False, threshold=(None, 0.13)), '8': ThresholdsOutput(value=0.36, passed=False, threshold=(None, 0.12)), '9': ThresholdsOutput(value=0.36, passed=False, threshold=(None, 0.11)), '10': ThresholdsOutput(value=0.36, passed=False, threshold=(None, 0.1))}, \n",
       "\ttop_ngram_chr_fraction={'2': ThresholdsOutput(value=0.01, passed=True, threshold=(None, 0.2)), '3': ThresholdsOutput(value=0.01, passed=True, threshold=(None, 0.18)), '4': ThresholdsOutput(value=0.01, passed=True, threshold=(None, 0.16))})"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "doc._.quality"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Naturally, you might not know what all of these mean, but you can easily check it on [the documentation site](https://hlasse.github.io/TextDescriptives/quality.html). Examining these we see that this text has a high proportion of characters which appear in duplicate n-grams `duplicate_10-gram_chr_fraction`. When this fraction is really high it means that the text contains a high proportion of repititions. This is often a sign of low quality text.\n",
    "\n",
    "If we examine the quality thresholds of the pipeline we can see that the max allowed value for `duplicate_10-gram_chr_fraction` is 0.1:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "n_stop_words=(2, None) alpha_ratio=(0.7, None) mean_word_length=(3, 10) doc_length=(10, 100000) symbol_to_word_ratio={'#': (None, 0.1)} proportion_ellipsis=(None, 0.3) proportion_bullet_points=(None, 0.8) contains={'lorem ipsum': False} duplicate_line_chr_fraction=(None, 0.2) duplicate_paragraph_chr_fraction=(None, 0.2) duplicate_ngram_chr_fraction={'5': (None, 0.15), '6': (None, 0.14), '7': (None, 0.13), '8': (None, 0.12), '9': (None, 0.11), '10': (None, 0.1)} top_ngram_chr_fraction={'2': (None, 0.2), '3': (None, 0.18), '4': (None, 0.16)}\n",
      "---\n",
      "The thresholds for Duplicate n-grams:\n",
      "{'5': (None, 0.15), '6': (None, 0.14), '7': (None, 0.13), '8': (None, 0.12), '9': (None, 0.11), '10': (None, 0.1)}\n"
     ]
    }
   ],
   "source": [
    "print(quality_pipe.quality_thresholds)\n",
    "\n",
    "print(\"---\")\n",
    "print(\"The thresholds for Duplicate n-grams:\")\n",
    "print(quality_pipe.quality_thresholds.duplicate_ngram_chr_fraction)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Extracting high quality texts\n",
    "We are typically interested in text which are not of low quality. We can extract these by filtering out the texts which did not pass the quality check."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "filtered_texts = [doc for doc in docs if doc._.passed_quality_check]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "A total of 1000 texts were processed and 572 passed the quality check.\n"
     ]
    }
   ],
   "source": [
    "print(\n",
    "    f\"A total of {len(docs)} texts were processed and {len(filtered_texts)} passed the quality check.\"\n",
    ")"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Changing the filters\n",
    "In some cases you might want to apply other filters. For instance the current filter sets a `symbol_to_word_ratio` threshold of 0.1 for hashtags `#`. This means that if a text contains a lot of hashtags it will be filtered out. However if you are working on e.g. tweets this is an unreasonable filter and you might want to adjust that. You can do this by overwriting the quality_thresholds:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "new_thresholds = td.QualityThresholds(\n",
    "    n_stop_words=(2, None),  # at least 2 stop words, no upper bound\n",
    "    alpha_ratio=(0.7, None),\n",
    "    mean_word_length=(3, 10),  # mean word length between 3 and 10 characters\n",
    "    doc_length=(10, 100_000),\n",
    "    symbol_to_word_ratio={},  # don't filter based on symbol to word ratio.\n",
    "    proportion_ellipsis=(None, 0.3),\n",
    "    proportion_bullet_points=(None, 0.8),\n",
    "    contains={\n",
    "        \"lorem ipsum\": False\n",
    "    },  # remove texts which contain the string \"lorem ipsum\"\n",
    "    duplicate_line_chr_fraction=(None, 0.2),\n",
    "    duplicate_paragraph_chr_fraction=(None, 0.2),\n",
    "    duplicate_ngram_chr_fraction={},  # don't filter based on duplicate n-grams\n",
    "    top_ngram_chr_fraction={\"2\": (None, 0.2), \"3\": (None, 0.18), \"4\": (None, 0.16)},\n",
    ")\n",
    "\n",
    "# overwrite the existing thresholds\n",
    "quality_pipe.set_quality_thresholds(new_thresholds)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you want to read more about what each argument does, please check out the [documentation](https://hlasse.github.io/TextDescriptives/quality.html#data-classes).\n",
    "All the `passed` values and `passed_quality_check` attributes are dynamically updated when you can `.set_quality_thresholds`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# check if the new text now pass the quality filter\n",
    "doc._.passed_quality_check"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Comparing Domains\n",
    "\n",
    "These quality metrics are heuristic based and need to be tuned. While the defaults are reasonable for some domains, they may not be for others. We will explore this a bit further in this section. These filters are specifically tuned for the web domain and this can lead to problems when applied directly to other domains.\n",
    "\n"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Data\n",
    "\n",
    "For this we will use the [Danish Gigaword](https://sprogteknologi.dk/dataset/danish-gigaword) available on [Huggingface Datasets](DDSC/partial-danish-gigaword-no-twitter). For the purpose of this tutorial we will just use a small test version of it containing around 2500 examples, but you could easily change it to use the whole dataset. Danish Gigaword is a large collection of Danish texts collected from a variety of domains."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "We can download the dataset using the following command:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using custom data configuration DDSC--partial-danish-gigaword-small-test-sample-6518b630de09688d\n",
      "Found cached dataset parquet (/Users/au561649/.cache/huggingface/datasets/DDSC___parquet/DDSC--partial-danish-gigaword-small-test-sample-6518b630de09688d/0.0.0/2a3b91fbd88a2c90d1dbbb32b460cf621d31bd5b05b934492fdef7d8d6f236ec)\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "2c78220f7f1e4c119901389899b11a7b",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/1 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from datasets import load_dataset\n",
    "\n",
    "# note that this can take a little while\n",
    "dataset = load_dataset(\"DDSC/partial-danish-gigaword-small-test-sample\")\n",
    "\n",
    "# All of the dataset is available in the train split\n",
    "dataset = dataset[\"train\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>text</th>\n",
       "      <th>source</th>\n",
       "      <th>doc_id</th>\n",
       "      <th>LICENSE</th>\n",
       "      <th>uri</th>\n",
       "      <th>date_built</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Den fulde tekst Pressenævnets kendelse i sag n...</td>\n",
       "      <td>retsinformationdk</td>\n",
       "      <td>retsinformationdk_173889</td>\n",
       "      <td>Danish Copyright law at https://www.retsinform...</td>\n",
       "      <td>https://www.retsinformation.dk/Forms/R0710.asp...</td>\n",
       "      <td>Fri Nov 22 00:51:31 2019 +0100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Resume\\n\\nEfter at der var sket afskedigelser ...</td>\n",
       "      <td>retsinformationdk</td>\n",
       "      <td>retsinformationdk_39059</td>\n",
       "      <td>Danish Copyright law at https://www.retsinform...</td>\n",
       "      <td>https://www.retsinformation.dk/Forms/R0710.asp...</td>\n",
       "      <td>Fri Nov 22 00:51:14 2019 +0100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Resume\\n\\nContainere kunne ikke anses som genb...</td>\n",
       "      <td>retsinformationdk</td>\n",
       "      <td>retsinformationdk_15045</td>\n",
       "      <td>Danish Copyright law at https://www.retsinform...</td>\n",
       "      <td>https://www.retsinformation.dk/Forms/R0710.asp...</td>\n",
       "      <td>Fri Nov 22 00:51:28 2019 +0100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Resume\\n\\nEn forhandler ved »home-parties« af ...</td>\n",
       "      <td>retsinformationdk</td>\n",
       "      <td>retsinformationdk_37261</td>\n",
       "      <td>Danish Copyright law at https://www.retsinform...</td>\n",
       "      <td>https://www.retsinformation.dk/Forms/R0710.asp...</td>\n",
       "      <td>Fri Nov 22 00:49:27 2019 +0100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Den fulde tekst\\n\\nSkrivelse om lov om fleksyd...</td>\n",
       "      <td>retsinformationdk</td>\n",
       "      <td>retsinformationdk_19415</td>\n",
       "      <td>Danish Copyright law at https://www.retsinform...</td>\n",
       "      <td>https://www.retsinformation.dk/Forms/R0710.asp...</td>\n",
       "      <td>Fri Nov 22 00:52:27 2019 +0100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Resume\\n\\nResumé\\n\\nKlage over påbud om særlig...</td>\n",
       "      <td>retsinformationdk</td>\n",
       "      <td>retsinformationdk_31217</td>\n",
       "      <td>Danish Copyright law at https://www.retsinform...</td>\n",
       "      <td>https://www.retsinformation.dk/Forms/R0710.asp...</td>\n",
       "      <td>Fri Nov 22 00:49:18 2019 +0100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Resume\\n\\nResumé\\n\\nI en række af de af Danmar...</td>\n",
       "      <td>retsinformationdk</td>\n",
       "      <td>retsinformationdk_14387</td>\n",
       "      <td>Danish Copyright law at https://www.retsinform...</td>\n",
       "      <td>https://www.retsinformation.dk/Forms/R0710.asp...</td>\n",
       "      <td>Fri Nov 22 00:49:49 2019 +0100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Oversigt (indholdsfortegnelse)\\n\\nBilag 1\\n\\nD...</td>\n",
       "      <td>retsinformationdk</td>\n",
       "      <td>retsinformationdk_166197</td>\n",
       "      <td>Danish Copyright law at https://www.retsinform...</td>\n",
       "      <td>https://www.retsinformation.dk/Forms/R0710.asp...</td>\n",
       "      <td>Fri Nov 22 00:49:44 2019 +0100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Den fulde tekst\\n\\nBekendtgørelse om afregning...</td>\n",
       "      <td>retsinformationdk</td>\n",
       "      <td>retsinformationdk_76994</td>\n",
       "      <td>Danish Copyright law at https://www.retsinform...</td>\n",
       "      <td>https://www.retsinformation.dk/Forms/R0710.asp...</td>\n",
       "      <td>Fri Nov 22 00:52:52 2019 +0100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Den fulde tekst Ligebehandlingsnævnets afgørel...</td>\n",
       "      <td>retsinformationdk</td>\n",
       "      <td>retsinformationdk_192325</td>\n",
       "      <td>Danish Copyright law at https://www.retsinform...</td>\n",
       "      <td>https://www.retsinformation.dk/Forms/R0710.asp...</td>\n",
       "      <td>Fri Nov 22 00:51:41 2019 +0100</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                text             source  \\\n",
       "0  Den fulde tekst Pressenævnets kendelse i sag n...  retsinformationdk   \n",
       "1  Resume\\n\\nEfter at der var sket afskedigelser ...  retsinformationdk   \n",
       "2  Resume\\n\\nContainere kunne ikke anses som genb...  retsinformationdk   \n",
       "3  Resume\\n\\nEn forhandler ved »home-parties« af ...  retsinformationdk   \n",
       "4  Den fulde tekst\\n\\nSkrivelse om lov om fleksyd...  retsinformationdk   \n",
       "5  Resume\\n\\nResumé\\n\\nKlage over påbud om særlig...  retsinformationdk   \n",
       "6  Resume\\n\\nResumé\\n\\nI en række af de af Danmar...  retsinformationdk   \n",
       "7  Oversigt (indholdsfortegnelse)\\n\\nBilag 1\\n\\nD...  retsinformationdk   \n",
       "8  Den fulde tekst\\n\\nBekendtgørelse om afregning...  retsinformationdk   \n",
       "9  Den fulde tekst Ligebehandlingsnævnets afgørel...  retsinformationdk   \n",
       "\n",
       "                     doc_id  \\\n",
       "0  retsinformationdk_173889   \n",
       "1   retsinformationdk_39059   \n",
       "2   retsinformationdk_15045   \n",
       "3   retsinformationdk_37261   \n",
       "4   retsinformationdk_19415   \n",
       "5   retsinformationdk_31217   \n",
       "6   retsinformationdk_14387   \n",
       "7  retsinformationdk_166197   \n",
       "8   retsinformationdk_76994   \n",
       "9  retsinformationdk_192325   \n",
       "\n",
       "                                             LICENSE  \\\n",
       "0  Danish Copyright law at https://www.retsinform...   \n",
       "1  Danish Copyright law at https://www.retsinform...   \n",
       "2  Danish Copyright law at https://www.retsinform...   \n",
       "3  Danish Copyright law at https://www.retsinform...   \n",
       "4  Danish Copyright law at https://www.retsinform...   \n",
       "5  Danish Copyright law at https://www.retsinform...   \n",
       "6  Danish Copyright law at https://www.retsinform...   \n",
       "7  Danish Copyright law at https://www.retsinform...   \n",
       "8  Danish Copyright law at https://www.retsinform...   \n",
       "9  Danish Copyright law at https://www.retsinform...   \n",
       "\n",
       "                                                 uri  \\\n",
       "0  https://www.retsinformation.dk/Forms/R0710.asp...   \n",
       "1  https://www.retsinformation.dk/Forms/R0710.asp...   \n",
       "2  https://www.retsinformation.dk/Forms/R0710.asp...   \n",
       "3  https://www.retsinformation.dk/Forms/R0710.asp...   \n",
       "4  https://www.retsinformation.dk/Forms/R0710.asp...   \n",
       "5  https://www.retsinformation.dk/Forms/R0710.asp...   \n",
       "6  https://www.retsinformation.dk/Forms/R0710.asp...   \n",
       "7  https://www.retsinformation.dk/Forms/R0710.asp...   \n",
       "8  https://www.retsinformation.dk/Forms/R0710.asp...   \n",
       "9  https://www.retsinformation.dk/Forms/R0710.asp...   \n",
       "\n",
       "                       date_built  \n",
       "0  Fri Nov 22 00:51:31 2019 +0100  \n",
       "1  Fri Nov 22 00:51:14 2019 +0100  \n",
       "2  Fri Nov 22 00:51:28 2019 +0100  \n",
       "3  Fri Nov 22 00:49:27 2019 +0100  \n",
       "4  Fri Nov 22 00:52:27 2019 +0100  \n",
       "5  Fri Nov 22 00:49:18 2019 +0100  \n",
       "6  Fri Nov 22 00:49:49 2019 +0100  \n",
       "7  Fri Nov 22 00:49:44 2019 +0100  \n",
       "8  Fri Nov 22 00:52:52 2019 +0100  \n",
       "9  Fri Nov 22 00:51:41 2019 +0100  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# We can take a look at one of the examples:\n",
    "ten_samples = dataset.select(range(10))\n",
    "ten_samples.to_pandas()"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As previously mentioned, the Danish Gigaword corpus consist of multiple domains. For this tutorial, we will look at three of these domains. `retsinformationdk` which consists of legal documents, `hest` which contains post from a Danish debate forum ([heste-nettet.dk](https://www.heste-nettet.dk/)) and `spont` which contains texts transcribed from spontaneous speech."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "cf05115807f14affa8d479778d1c466a",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/3 [00:00<?, ?ba/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "b4e3b0d54e724294b184fc8389fa6a69",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/3 [00:00<?, ?ba/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "5e2b9e6a5a3243008c0972e66b54e426",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/3 [00:00<?, ?ba/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# we can filter out these three datasets based on the \"source\"\n",
    "legal = dataset.filter(lambda x: x[\"source\"] == \"retsinformationdk\", num_proc=1)\n",
    "news = dataset.filter(lambda x: x[\"source\"] == \"tv2r\", num_proc=1)\n",
    "speech = dataset.filter(lambda x: x[\"source\"] == \"spont\", num_proc=1)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can now examine these datasets a bit more:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Legal contains 1000 examples\n",
      "News contains 1000 examples\n",
      "Speech contains 411 examples\n"
     ]
    }
   ],
   "source": [
    "print(f\"Legal contains {len(legal)} examples\")\n",
    "print(f\"News contains {len(news)} examples\")\n",
    "print(f\"Speech contains {len(speech)} examples\")"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can for example see that the speech dataset contains notably fewer samples than the others. "
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Quality Filtering\n",
    "After we have prepared our datasets we can now start with the quality filtering. Using TextDescriptives, this is extremely simple. We need to do 3 things:\n",
    "\n",
    "1) Create a pipeline\n",
    "2) Add the quality component to it\n",
    "3) Apply the pipeline to the dataset\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 1. Crease a blank spaCy model with a sentencizer as that's the only component required for the quality metrics\n",
    "nlp = spacy.blank(\"da\")\n",
    "nlp.add_pipe(\"sentencizer\")\n",
    "nlp.max_length = (\n",
    "    2000000  # as some of the documents are quite long we can increase the max length\n",
    ")\n",
    "# however it might be worth filtering out these documents beforehand for very very long documents.\n",
    "\n",
    "# 2. Add the textdescriptives pipeline\n",
    "quality_pipe = nlp.add_pipe(\"textdescriptives/quality\")\n",
    "\n",
    "# 3. Apply the pipeline to the legal documents\n",
    "legal_docs = nlp.pipe(legal[\"text\"])"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If we check now we can see that legal_docs is a generator. This can be a quite efficient format, but for now we just want to process all the text so we simply need to convert it to a list:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<generator object Language.pipe at 0x14b8320b0>"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "legal_docs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "legal_docs = list(legal_docs)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can now inspect the output here:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Den fulde tekst Pressenævnets kendelse i sag nr. 15-70-00822\n",
      "Resumé\n",
      "Foreningen for Skånsomt Kystfiskeri har ikke retlig interesse\n",
      "DR bragte et radioindslag om Natur- og Erhvervsstyrelsens fiskeriinspektorats fangst af ulovlige ålefælder. Foreningen for Skånsomt Kystfiskeri klagede blandt andet med den begrundelse, at betegnelsen ” ålefælder ” er forkert, idet ålene selv kan svømme ind og ud. Pressenævnet afviser at behandle klagen, da foreningen ikke er omtalt i udsendelsen og derfor ikke har retlig interesse.\n",
      "Pressenævnets formand udtaler:\n",
      "Det er en betingelse for at klage til Pressenævnet, at\n",
      "----\n",
      "This passed the quality filter:\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "legal_doc = legal_docs[0]\n",
    "\n",
    "print(legal_doc[:100])  # print the first 100 tokens\n",
    "print(\"----\")\n",
    "print(\"This passed the quality filter:\")\n",
    "legal_doc._.passed_quality_check"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here we see that the text did not pass the quality filter. We can now examine why that using the following code:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "QualityOutput(passed=False, n_stop_words=ThresholdsOutput(value=192.0, passed=True, threshold=(2.0, None)), alpha_ratio=ThresholdsOutput(value=0.8, passed=True, threshold=(0.7, None)), mean_word_length=ThresholdsOutput(value=4.55, passed=True, threshold=(3.0, 10.0)), doc_length=ThresholdsOutput(value=500.0, passed=True, threshold=(10.0, 100000.0)), symbol_to_word_ratio={'#': ThresholdsOutput(value=0.0, passed=True, threshold=(None, 0.1))}, proportion_ellipsis=ThresholdsOutput(value=0.0, passed=True, threshold=(None, 0.3)), proportion_bullet_points=ThresholdsOutput(value=0.0, passed=True, threshold=(None, 0.8)), contains={'lorem ipsum': ThresholdsOutput(value=0.0, passed=True, threshold=False)}, duplicate_line_chr_fraction=ThresholdsOutput(value=0.26, passed=False, threshold=(None, 0.2)), duplicate_paragraph_chr_fraction=ThresholdsOutput(value=0.0, passed=True, threshold=(None, 0.2)), duplicate_ngram_chr_fraction={'5': ThresholdsOutput(value=0.54, passed=False, threshold=(None, 0.15)), '6': ThresholdsOutput(value=0.52, passed=False, threshold=(None, 0.14)), '7': ThresholdsOutput(value=0.52, passed=False, threshold=(None, 0.13)), '8': ThresholdsOutput(value=0.52, passed=False, threshold=(None, 0.12)), '9': ThresholdsOutput(value=0.52, passed=False, threshold=(None, 0.11)), '10': ThresholdsOutput(value=0.52, passed=False, threshold=(None, 0.1))}, top_ngram_chr_fraction={'2': ThresholdsOutput(value=0.02, passed=True, threshold=(None, 0.2)), '3': ThresholdsOutput(value=0.04, passed=True, threshold=(None, 0.18)), '4': ThresholdsOutput(value=0.07, passed=True, threshold=(None, 0.16))})"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "legal_doc._.quality"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here we see that fraction of characters which is a part of a duplicate 10 gram is >50%. This is a reason why the sample was filtered out. This is not uncommon for legal documents which contain a lot of standard phrases. However you might wish to change the threshold for this filter. We showed you have to do this in the previous section. We also see that the `alpha_ratio` is close 0.8. This means that the text is mostly made up of alphabetic characters. This is good, but as we will see later, this is not common for legal texts."
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Filtering out the text\n",
    "Assuming we don't want to change the filters we can now use it to filter out the texts that we want to keep:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 4. Filter out the documents that do not pass the quality\n",
    "legal_docs_filtered = [doc for doc in legal_docs if doc._.passed_quality_check]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "We had a total of 1000 which we filtered down to 264.\n"
     ]
    }
   ],
   "source": [
    "print(\n",
    "    f\"We had a total of {len(legal['text'])} which we filtered down to {len(legal_docs_filtered)}.\"\n",
    ")"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "That seems like a lot, we should probably check why that is. We can do this by looking at the distribution of the scores of e.g. duplicate 10-gram fraction:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot: ylabel='Count'>"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "\n",
    "\n",
    "def get_duplicate_10_gram_fraction(doc):\n",
    "    quality = doc._.quality\n",
    "    duplicate_10_gram_fraction = quality.duplicate_ngram_chr_fraction[\"10\"]\n",
    "    return duplicate_10_gram_fraction.value\n",
    "\n",
    "\n",
    "duplicate_10_gram_fraction = [get_duplicate_10_gram_fraction(doc) for doc in legal_docs]\n",
    "sns.histplot(duplicate_10_gram_fraction)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This seems like it explains a lot of the texts which were filtered out, but does not explain everything. Let us take a look at the `alpha_ratio` (the proportion of words which contains at least one alphabetic character) as well:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot: ylabel='Count'>"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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Zd27SFekZ/g83l17Uns2LJXL5aLs9DLKDgAAPhgSn6rY1OGhjgEfcIIyAAAwGmUHAAAYjV9jAQB85nQ65XK5/BobyNVMgD8oOwAAnzidTmVkZKq1tSWg/bR5LgQpEfDNbF12Ojo69MQTT+ill15SXV2dkpOT9fOf/1yLFy+Ww+GQJFmWpcLCQq1bt06NjY0aN26cVq9erWHDhoU4PQCYyeVyqbW1RdlzChWVlObz+NpD5arcvlbt7e3BDwd8DVuXnaefflqrV6/W5s2bdd1112n//v26//77FR0drYcffliS9Mwzz2jlypXavHmz0tPTtWTJEk2aNElHjhxRREREiL8BAJgrKinNr6uS3LUngx8G+Aa2Lju7d+/W1KlTdfvtt0uS0tLS9Mc//lF79+6V9OVRnZKSEi1evFhTp06VJL344otKSEjQa6+9phkzZoQsOwAAsAdbX401duxYlZWV6eOPP5Yk/elPf9KHH36oyZMnS5JOnDihuro65ebmesdER0crOztb5eXl3e7X4/HI7XZ3WQAAgJlsfWTnsccek9vtVkZGhvr166eOjg499dRTmjlzpiSprq5OkpSQkNBlXEJCgnfb1ykuLtbSpUt7LjgAALANWx/Z+c///E9t2bJFW7du1YEDB7R582YtX75cmzdvDmi/BQUFampq8i41NTVBSgwAAOzG1kd2fvWrX+mxxx7znnszYsQIffrppyouLtbs2bOVmJgoSaqvr1dSUpJ3XH19vbKysrrdb3h4uMLDw3s0OwAAsAdbH9lpaWlRWFjXiP369VNnZ6ckKT09XYmJiSorK/Nud7vd2rNnj3Jycno1KwAAsCdbH9m544479NRTTyk1NVXXXXed/vd//1crVqzQnDlzJEkOh0MLFizQk08+qWHDhnkvPU9OTta0adNCGx4AANiCrcvOc889pyVLlujBBx/UmTNnlJycrF/+8pd6/PHHve959NFH1dzcrHnz5qmxsVHjx49XaWkp99gBAACSbF52IiMjVVJSopKSkm7f43A4VFRUpKKiot4LBgAA+gxbn7MDAAAQKMoOAAAwGmUHAAAYjbIDAACMRtkBAABGo+wAAACjUXYAAIDRKDsAAMBolB0AAGA0W99BGQAA01RVVfk1Li4uTqmpqUFOc2nwq+xcc8012rdvn4YOHdplfWNjo374wx/q+PHjQQkHAIApWps+l+TQrFmz/Bo/aNBlOnq0isLjB7/KzsmTJ9XR0fGV9R6PR6dOnQo4FAAApmlrOSvJUta9i3RFeoZPY921J7Vnw1K5XC7Kjh98Kjvbt2/3/vOOHTsUHR3tfd3R0aGysjKlpaUFLRwAAKYZEp+q2NThoY5xSfGp7EybNk3Sl08anz17dpdtAwYMUFpamn7/+98HLRwAAECgfCo7nZ2dkqT09HTt27dPcXFxPRIKAAAgWPw6Z+fEiRPBzgEAANAj/L70vKysTGVlZTpz5oz3iM9FGzZsCDgYAABAMPhVdpYuXaqioiKNHj1aSUlJcjgcwc4FAAAQFH6VnTVr1mjTpk267777gp0HAAAgqPx6XMSFCxc0duzYYGcBAAAIOr/Kzi9+8Qtt3bo12FkAAACCzq9fY50/f15r167Vu+++qxtuuEEDBgzosn3FihVBCQcAABAov8rOn//8Z2VlZUmSKisru2zjZGUAAGAnfpWd9957L9g5AAC9zOl0yuVy+TzO36d2A6Hi9312AAB9l9PpVEZGplpbW/zeR5vnQhATAT3Hr7IzceLEb/x11c6dO/0OBADoeS6XS62tLcqeU6iopDSfxtYeKlfl9rVqb2/vmXBAkPlVdi6er3NRW1ubDh48qMrKyq88IBQAYF9RSWk+P4HbXXuyZ8IAPcSvsvPss89+7fonnnhC586dCygQAABAMPl1n53uzJo1i+diAQAAWwlq2SkvL1dEREQwdwkAABAQv36Nddddd3V5bVmWamtrtX//fi1ZsiQowQAAAILBr7ITHR3d5XVYWJiGDx+uoqIi3XrrrUEJBgAAEAx+lZ2NGzcGOwcAAECPCOimghUVFd47aV533XUaOXJkUEIBAAAEi19l58yZM5oxY4bef/99xcTESJIaGxs1ceJEbdu2TVdccUUwMwIAAPjNr6uxHnroIZ09e1aHDx9WQ0ODGhoaVFlZKbfbrYcffjjYGQEAAPzm15Gd0tJSvfvuu8rMzPSuu/baa7Vq1SpOUAYAALbi15Gdzs5ODRgw4CvrBwwYoM7OzoBDAQAABItfZeemm27SI488otOnT3vXnTp1SgsXLtTNN98ctHAAAACB8uvXWM8//7zuvPNOpaWlKSUlRZJUU1Oj66+/Xi+99FJQAwIAgC9dvALaH3FxcUpNTQ1imr7Dr7KTkpKiAwcO6N1339XRo0clSZmZmcrNzQ1qOAAAILU2fS7JoVmzZvm9j0GDLtPRo1WXZOHxqezs3LlT8+fP10cffaSoqCjdcsstuuWWWyRJTU1Nuu6667RmzRr9+Mc/7pGwAABcitpazkqylHXvIl2RnuHzeHftSe3ZsFQul4uy821KSko0d+5cRUVFfWVbdHS0fvnLX2rFihWUHQAAesCQ+FTFpg4PdYw+x6cTlP/0pz/ptttu63b7rbfeqoqKioBDAQAABItPZae+vv5rLzm/qH///vrss88CDvXXTp06pVmzZmno0KEaNGiQRowYof3793u3W5alxx9/XElJSRo0aJByc3P1l7/8JagZAABA3+VT2bnyyitVWVnZ7fY///nPSkpKCjjURV988YXGjRunAQMG6H/+53905MgR/f73v9fll1/ufc8zzzyjlStXas2aNdqzZ48GDx6sSZMm6fz580HLAQAA+i6fztmZMmWKlixZottuu00RERFdtrW2tqqwsFA//elPgxbu6aefVkpKSpenrKenp3v/2bIslZSUaPHixZo6daok6cUXX1RCQoJee+01zZgxI2hZAABA3+TTkZ3FixeroaFB3//+9/XMM8/o9ddf1+uvv66nn35aw4cPV0NDg37zm98ELdz27ds1evRo/exnP1N8fLxGjhypdevWebefOHFCdXV1XS55j46OVnZ2tsrLy7vdr8fjkdvt7rIAAAAz+XRkJyEhQbt379Y///M/q6CgQJZlSZIcDocmTZqkVatWKSEhIWjhjh8/rtWrVys/P1+//vWvtW/fPj388MMaOHCgZs+erbq6Om+uv815cdvXKS4u1tKlS4OWEwAA2JfPNxW8+uqr9dZbb+mLL77QsWPHZFmWhg0b1uU8mmDp7OzU6NGjtWzZMknSyJEjVVlZqTVr1mj27Nl+77egoED5+fne126323snaAAAYBa/7qAsSZdffrluvPHGYGb5iqSkJF177bVd1mVmZuq//uu/JEmJiYmSvrxK7K9PjK6vr1dWVla3+w0PD1d4eHjwAwMAANvx60GgvWXcuHGqrq7usu7jjz/W1VdfLenLk5UTExNVVlbm3e52u7Vnzx7l5OT0alYAAGBPfh/Z6Q0LFy7U2LFjtWzZMt19993au3ev1q5dq7Vr10r68lyhBQsW6Mknn9SwYcOUnp6uJUuWKDk5WdOmTQtteAAAYAu2Ljs3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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "alpha_ratio = [doc._.quality.alpha_ratio.value for doc in legal_docs]\n",
    "sns.histplot(alpha_ratio)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We see that most of the text do not pass the `alpha_ratio` threshold of 0.7 or higher. This is not uncommon for legal documents as e.g. the paragraph sign `§` is not an alphabetic character. It might be relevant to change the threshold to 0.7 or lower."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Comparing across domains\n",
    "We see that legal documents have quite a few perculiarities let us examine how the `alpha_ratio` behaves across different domains:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "# first we apply the pipeline to the other domains\n",
    "news_docs = nlp.pipe(news[\"text\"])\n",
    "news_docs = list(news_docs)\n",
    "speech_docs = nlp.pipe(speech[\"text\"])\n",
    "speech_docs = list(speech_docs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "# extract alpha ratio:\n",
    "news_alpha_ratio = [doc._.quality.alpha_ratio.value for doc in news_docs]\n",
    "speech_alpha_ratio = [doc._.quality.alpha_ratio.value for doc in speech_docs]"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we have the metrics we can plot a histogram comparing the metrics:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x29557f0d0>"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# histogram\n",
    "sns.histplot(news_alpha_ratio, label=\"News\", alpha=0.5, binwidth=0.05)\n",
    "sns.histplot(alpha_ratio, label=\"Legal\", alpha=0.5, binwidth=0.05)\n",
    "sns.histplot(speech_alpha_ratio, label=\"Speech\", alpha=0.5, binwidth=0.05)\n",
    "\n",
    "# add labels\n",
    "plt.xlabel(\"Alpha ratio\")\n",
    "plt.ylabel(\"Count\")\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here we see a couple of things:\n",
    "- A fair amount of legal documents have an alpha ratio above 0.6.\n",
    "- Almost no news text have a alpha ratio below 0.6.\n",
    "- The alpha ratio for the Speech corpus is suspicously low\n",
    "\n",
    "Let us examine one of the speech samples a bit more in-depth:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Taler 6: mm\n",
      "Taler 7: er du klar?\n",
      "Taler 6: ja\n",
      "Taler 7: så er spørgsmålet om vi skal- om det er sådan her ja det kunne man godt okay\n",
      "Taler 7: okay så det er ignore tab kill og kill tab\n",
      "Taler 6: NA\n",
      "Taler 6: kill\n",
      "Taler 6: kill tab\n",
      "Taler 7: super\n",
      "Taler 7: okay det er det hun lige har sagt\n",
      "Taler 6: ja\n",
      "Taler 6: ja\n",
      "Taler 6: NA\n"
     ]
    }
   ],
   "source": [
    "doc = speech_docs[0]\n",
    "# examine the first 100 tokens in the first document\n",
    "print(doc[:100])"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From this we can see that a high proportion of the tokens in the speech dataset dentoes the speaker such and tokens such as `:` then lower the alpa ratio. This might or might not be problematic for the task at hand.\n",
    "\n",
    "**Therefore it is important to note that while these filters are useful for filtering large amount of texts it is also important to know that they should be adjusted to the target domain.**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "textdescriptives",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.15"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "31387647799921bb85032eec7bb02e281325ae7f8ffa6f9cd7cdead815b36c88"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
